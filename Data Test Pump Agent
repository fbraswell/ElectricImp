// Agent code for Data Test
server.log("---AGENT START---");
const XIVELY_URL = "https://api.xively.com/v2/feeds/";  // Xively base URL
const XIVELY_Account_Authorization = "Basic a25pZ2h0aGF3azprbmlnM3QzOHdr"; // WellMark knighthawk auth
const PUMP_MODE = 1;
const TRANSDUCER_MODE = 0; 
// myDevID <- "no Imp dev id yet";
IMP_DEV_ID <- "no Imp dev id yet";
XIVELY_FEED <- 0;   // Xively feed # will go here
XIVELY_FEED_NAME <- "xively feed name"; // Xively Feed Name
XIVELY_API_ENDPOINT <- "no Xively endpoint yet";
// agent_myapikey <- "no Xively feed key yet";
XIVELY_API_KEY <- "no Xively feed key yet";

IMP_SAMPLE_PER <- 10; // Default 10 sec sample period
IMP_XMIT_PER <- 60; // Default 60 sec transmit period
// IMP_MODE <- TRANSDUCER_MODE; // Mode 0 = transducer only; Mode 1 = Pump
IMP_MODE <- PUMP_MODE; // Mode 0 = transducer only; Mode 1 = Pump

// Get meta data from the device, which includes the
// impID and ssid information

//  meta key: ssid val: FrankBraswellsPhone5s
//  meta key: devid val: 235c87eb6e4936ee
device.on("metadata", function(data)
    {
//        local makemeta = "";
        foreach (key, val in data)
        {
            server.log("meta key: "+key+" val: "+val);
        }
        // stash the imp ID for later use
        IMP_DEV_ID <- data.devid;      
        getXivelyFeedsTable();
    }
);  // device.on("metadata", function(data)

// Get table data from device and form a csv file
device.on("tabledata",function(data)
    {
     //  First make sure that IMP_DEV_ID is defined
    //  If not, get the information from the Imp
    // This situation can happen during development when
    // the agent code is updated, but the device code
    // doesn't change    
    if(IMP_DEV_ID == "no Imp dev id yet")
    {
        server.log("Don't have Imp dev id");
        local obj = 0;
        // See if I can catch it here - Imp must not be sleeping
//        device.send("getImpInfo", obj);  // Request Information
        device.onconnect(function() 
        {
            device.send("getImpInfo", obj);  // Request Information
            server.log("Request Imp dev id"); 
        });
    } else
    {
        // Since device.onconnect stays active and executes with
        // each connect, it is necessary to reset it at disconnect time.
        // At disconnect time, turn off the device.onconnect procedure
        // so the device.send("getImpInfo", obj) doesn't keep running
        device.ondisconnect(function()
        {
            device.onconnect(function(){});
        });
    }    
        
        local makecsv = ""; // used to build csv file for Xively
        foreach (key, val in data)
        {
            if(key.len() > 9 && (key.find("MB") == null)) // time stamp string is longer than the other keys
            {
                    // build time string
                local v = key.tointeger() - data["time"];
                local t = date(key.tointeger());
                local tformat = format("%4d-%02d-%02dT%02d:%02d:%02d", 
                                        t.year, t.month + 1, t.day, t.hour, t.min, t.sec);
// debug               server.log("table key: "+key+", val: "+val+" - time diff: "+v+" time: "+tformat);
                    // build csv entry with name of chan, time, data value
                makecsv += "pvolttest, "+tformat+", "+val+"\n";
            } else
            {
// debug                server.log("table key: "+key+", val: "+val);
                    // build csv entry with name of chan, data value
                makecsv += key+", "+val+"\n";
            }
        }
            // DEBUG dump csv string
        server.log("----****----Make CSV:\n"+makecsv);
            // send data to Xively feed
        dataToXively(makecsv);
    }
);  // device.on("tabledata",function(data)

// Prepare the request with a csv payload 
function dataToXively(csv) 
{    
//    2107508645
//  "iKZLtPhqDBWssrASLyNyot8n1pUc5pshqOZlCgqlip0WH0je"
// format("https://api.xively.com/v2/feeds/%d.csv", XIVELY_FEED);
//    local XIVELY_API_ENDPOINT = "https://api.xively.com/v2/feeds/"+2107508645+".csv";
    local XIVELY_API_ENDPOINT = "https://api.xively.com/v2/feeds/"+XIVELY_FEED+".csv";
//    local agent_myapikey = "iKZLtPhqDBWssrASLyNyot8n1pUc5pshqOZlCgqlip0WH0je";
  local body =  csv;
  local extraHeaders = {
//                        "User-Agent": "xively-Imp-Lib/1.0", 
                        "X-Api-Key": XIVELY_API_KEY,
//                        "Authorization": "Basic a25pZ2h0aGF3azprbmlnM3QzOHdr",
                        "Authorization": XIVELY_Account_Authorization,
//                        "Content-Type": "text/csv",
//                        "Content-Length": format("%d",body.len())
//                        "Content-Length": body.len()
                        };
  local request = http.put(XIVELY_API_ENDPOINT, extraHeaders, body);
//  server.log("API ENDPOINT: "+XIVELY_API_ENDPOINT+
//                " myapikey: "+XIVELY_API_KEY+
//                " length of package: "+body.len());
                
    server.log("Xively Feed: "+XIVELY_FEED_NAME+
                " ImpID: "+IMP_DEV_ID+
                " pkg len: "+body.len()+
                " sam per: "+IMP_SAMPLE_PER+
                "s xmit per: "+IMP_XMIT_PER+"s "+
                (IMP_MODE?"Pump Mode":"Transducer Mode") );
                
//  server.log("put request: "+request+" extra headers: "+extraHeaders);
  request.sendasync(dataToXivelyResponse);
//   local response = request.sendsync();
//   processResponse(response);
}   // function dataToXively(csv) 

// This is the completed-request callback function, which logs the
// incoming response's message and status code
function dataToXivelyResponse(response) 
{
    if (response.statuscode == 200)
    {
        return;
    }
        // print message if status code is not 200
    server.log("Status Code Put dataToXively CSV: " + response.statuscode + 
                ", Message: " + (response.body==""?"none":response.body));
}   // function dataToXivelyResponse(response) 

// Get Xively/Imp connection data from a special Xively feed
// called from device.on("metadata", function(data)
function getXivelyFeedsTable()
{
        // This is the feed URL for the Xively Feeds Table
    local url = "https://api.xively.com/v2/feeds/1879147064";
//    local xively_apikey = "rOSourU7osPHSsLzveclcZGjVwhLek0GMhUPVhTfWwsMwY6v";  
    local extraHeaders = {
                        "X-Api-Key": "rOSourU7osPHSsLzveclcZGjVwhLek0GMhUPVhTfWwsMwY6v",
//                        "User-Agent":"xively-Imp-Lib/1.0", 
//                        "Content-Type":"text/csv",
//                        "Authorization": "Basic a25pZ2h0aGF3azprbmlnM3QzOHdr"
                        "Authorization": XIVELY_Account_Authorization,
                        };
        // Set up the get request
    local request = http.get(url, extraHeaders);
//    request.sendasync(processResponseFeeds);
        // Make the request
    local response = request.sendsync();
        // Process the response
    getXivelyFeedsTableResponse(response);
    
}   // function getXivelyFeedsTable()

// This is the completed-request callback function, which logs the
// incoming response's message and status code
function getXivelyFeedsTableResponse(response) 
{
    server.log("Status Code Xively Feeds: " + response.statuscode + ", Message: " + 
                (response.body==""?"none":response.body.slice(0,25)+"..."));
                
    // In the Special Xively Feed, under the description meta data field
    // there are a group of lines such as the following.
    // Each line contains a comma delimited fields that identify
    
    // impID, Xively feed name, feed id and feed api key.

//    ImpID,       XivelyName,  XivelyFeed,      XivelyApiKey
//  anyimp, SpecialData,   1879147064, rOSourU7osPHSsLzveclcZGjVwhLek0GMhUPVhTfWwsMwY6v
//  235e9deb6e4936ee, WM235e9,   1932829324, 8HqPPy2ymRbzqZhT2TtdWM5h193oJmf8uQhoSdvtfxc9bAYA
//  23219ab236a7c9ee, WM23219, 343437348, WlnQANSpdLKnerPxm62yhaxVVwEojtBjQT0Okru4zt7WDKwh
    
    // The goal here is to search through the lines with the imp ID (IMP_DEV_ID),
    // find the line that starts with the imp ID, isolate the line, and
    // split the line into the components.
    
    // take apart the response body and find Xively info
    // First json decode the line. The data we are looking for
    // is in the data.description string object
    local data = http.jsondecode(response.body);
        // match the line with the Imp DeviceID
        // define a regex to look for the dev ID at the beginning
        // of a line
    local match = @"("+IMP_DEV_ID+@".*\n)"; // regex string defined
        // compile the regex
    local ex = regexp(match);
        // apply the regular expression
    local result = ex.capture(data.description);
    local xivelyInfo; // array for Xively name, feed and api key
        // xivelyInfo[0] = ImpID
        // xivelyInfo[1] = XivelyName
        // xivelyInfo[2] = XivelyFeed
        // xivelyInfo[3] = XivelyApiKey
    
        // if the regular expression returns null, there is no match
    if (result == null)
    {
        server.log("--result == null: no match in: "+data.description);
        return;
    }
    
            // if here, regular expression matched
            // Next, grab the line with the imp ID and 
            // split out the Xively feed information
            
            // result contains an array of tables with
            // the begin and end position
            // values for the match
            
//    server.log("search results for Imp-Xively Table: "+data.description.slice(result[0].begin,result[0].end));
        // slice gets the string with imp ID
        // split breaks the string apart by commas
        // This gives an array with the following elements:
        // impID,           Xively feed name,   feed id and feed api key.
        // 235c87eb6e4936ee, PowerTest01,       2107508645, iKZLtPhqDBWssrASLyNyot8n1pUc5pshqOZlCgqlip0WH0je
    xivelyInfo = split(data.description.slice(result[0].begin,result[0].end),", ");
/*
            foreach(valx in xivelyInfo)
            {
                server.log("Imp-Xively info: "+valx);
            }
*/
//        }
//    xivelyInfo[0] - Imp ID
//    xivelyInfo[1] - Name of Xively Feed
//    xivelyInfo[2] - Feed ID
//    xivelyInfo[3] - API Key
    server.log("Imp-Xively Table Info: Imp ID: "+xivelyInfo[0]+" Feed Name: "+xivelyInfo[1]+
                " Feed ID: "+xivelyInfo[2]+" API key: "+xivelyInfo[3]);
        
        // strip gets rid of whitespace at the beginning and end of the string - needed 
        // to get rid of new line
    IMP_DEV_ID  = strip(xivelyInfo[0]);
    XIVELY_FEED_NAME = strip(xivelyInfo[1]);
    XIVELY_FEED = strip(xivelyInfo[2]);
    XIVELY_API_KEY = strip(xivelyInfo[3]);
    
    try // see if any of these are in the array
    {
        IMP_SAMPLE_PER = strip(xivelyInfo[4]);
        IMP_XMIT_PER = strip(xivelyInfo[5]);
        IMP_MODE = strip(xivelyInfo[6]).tointeger(); // MOTOR or TRANSDUCER mode
    }  catch (e) 
    {
        // We don't care if it fails because default values will be there
    }

/*    
        // The following items may also be included in the table
    local xlen = xivelyInfo.len();
    if(xlen >= 5)
    {
        IMP_SAMPLE_PER = strip(xivelyInfo[4]);
    } else if(xlen >= 6)
    {
        IMP_XMIT_PER = strip(xivelyInfo[5]);
    } else if(xlen >= 7)
    {
        IMP_MODE = strip(xivelyInfo[6]); // MOTOR or TRANSDUCER mode
    }
*/
        // These should be either default values or set in the code above    
    server.log("Imp samples period: "+IMP_SAMPLE_PER);
    server.log("Imp transmit period: "+IMP_XMIT_PER);
    server.log("Operating mode: "+(IMP_MODE?"Pump Mode":"Transducer Mode"));
    
    local vars = { "IMP_SAMPLE_PER" : IMP_SAMPLE_PER,
                    "IMP_XMIT_PER" : IMP_XMIT_PER,
                    "IMP_MODE" : IMP_MODE,
                };
    
        // in order to use device.send, the device must not
        // be asleep. If asleep, it never receives the send.
        // To make sure device is awake, use the device.onconnect
        // method to send the device.send request
    device.onconnect(function() 
    {
        // Send information to device
        device.send("impControlVariables", vars );
        server.log("######## Device connected to agent - impControlVariables");
    });

        // Since device.onconnect stays active and executes with
        // each connect, it is necessary to reset it at disconnect time.
        // At disconnect time, turn off the device.onconnect procedure
        // so the device.send(newsetpoint, num) doesn't keep running
    device.ondisconnect(function()
    {
        device.onconnect(function(){});
    });
    
        // diagnostic dump
/*    foreach (key,val in data)
    {
        server.log("feeds: "+key+": "+val);
    }
*/
}   // function getXivelyFeedsTableResponse(response) 

// handle a trigger from Xively
function requestHandler(request, response)
{
    server.log("++++++++++++++received request++++++++++++++++");
    // Check if the variable led was passed into the query
//  if ("cmd1" in request.query) 
//  {
    // if it was, send the value of it to the device
    // device.send("cmd1 found: ", request.query["cmd1"]);
    local num = 9;
    local data;
        // decode the url
    data = http.urldecode(request.body);
    local datajson;
        // now decode json to make an object
    datajson = http.jsondecode(data.body);
        // get the value of the new setting from the object
    num = datajson.triggering_datastream.value.value;
    
        // in order to use device.send, the device must not
        // be asleep. If asleep, it never receives the send.
        // To make sure device is awake, use the device.onconnect
        // method to send the device.send request
    device.onconnect(function() 
    {
        device.send("newsetpoint", num);
        server.log("######## Device connected to agent - newsetpoint");
    });

        // Since device.onconnect stays active and executes with
        // each connect, it is necessary to reset it at disconnect time.
        // At disconnect time, turn off the device.onconnect procedure
        // so the device.send(newsetpoint, num) doesn't keep running
    device.ondisconnect(function()
    {
        device.onconnect(function(){});
    });

    server.log("cmd1 found in request.query: "+request.query.cmd1);
//  } // if ("cmd1" in request.query) 
  
//    server.log("cmd1: "+request.query.cmd1);
//    server.log("cmd2: "+request.query["cmd2"]);
//    server.log("body of message: "+request.body);
    
//    try
//    {
 //       local data;
//        local data = http.urldecode(request.body);
//        local datajson;
//        local datajson = http.jsondecode(data.body);
        
/*        
        foreach(key, val in datajson)
        {
//            server.log("==url data.body key: "+key);
            server.log("==json decode of data.body key: "+key+" val: "+val);
        }
*/        
//        server.log("datajson id: "+datajson.id);
//        server.log("datajson timestamp: "+datajson.timestamp);
//        server.log("datajson.triggering_datastream.id: "+datajson.triggering_datastream.id);
//        server.log("datajson.triggering_datastream.value.value: "+datajson.triggering_datastream.value.value);
/*
        data = http.base64decode(request.body);
        server.log("base 64 decode of body: "+data);
        data = http.jsondecode(request.body);
        server.log("json decode of body: "+data);
*/
 //   } catch (e) 
 //   {
        // send a response indicating invalid JSON
//        server.log("!!!!--Ivalid decode string");
        // response.send(500, "Invalid JSON string");
//    }
/*    
    foreach(key,val in request)
    {
        server.log("---request: "+key+": val: "+val);
    }
    foreach(key,val in request.query)
    {
        server.log("---request.query: "+key+": val: "+val);
    }
*/

try
    {
        // send a response back to whoever made the request
//        response.send(200, "OK");
        response.send(200, "OK"); // "200: OK" is standard return message
    }
    catch (ex)
    {
        response.send(500, ("Agent Error: " + ex)); // Send 500 response if error occured
    }
    
}   // function requestHandler(request, response)

    // set up the http request handler
http.onrequest(requestHandler);

/*
//  First make sure that IMP_DEV_ID is defined
//  If not, get the information from the Imp
// This situation can happen during development when
// the agent code is updated, but the device code
// doesn't change   
if(IMP_DEV_ID == "no Imp dev id yet")
{
    server.log("Don't have Imp dev id");
    device.onconnect(function() 
    {
        local obj = [];
        device.send("getImpInfo", obj);  // Request Information
        server.log("Request Imp dev id"); 
    });

        // Since device.onconnect stays active and executes with
        // each connect, it is necessary to reset it at disconnect time.
        // At disconnect time, turn off the device.onconnect procedure
        // so the device.send(newsetpoint, num) doesn't keep running
    device.ondisconnect(function()
    {
        device.onconnect(function(){});
    });
}
*/
server.log("---AGENT CODE END---");
    
