// Device code for Data Test
// server.log("---DEVICE START---");

// When the Imp comes out of deep sleep, it starts here
// log an ADC value each 10 sec, only tell the server each minute 
t <- time();

const MBwrite = 1;
const MBread = 0;

const MB_ONTIME = "MB_OnTime";
const MB_OFFTIME = "MB_OffTime";
const MB_TEMPSETPOINT = "MB_TempSetPoint";
const MB_QUARTSPERDAY = "MB_QuartsPerDay";
const MB_CYCLES = "MB_Cycles";
const MB_TEMPERATURE = "MB_Temperature";
const MB_PLUNGERSIZE = "MB_PlungerSize";
const MB_PINPOSITION = "MB_PinPosition";
const MB_MOTORSIZE = "MB_MotorSize";
const MB_BATTERYVOLTAGE = "MB_BatteryVoltage";
const MB_VERSIONNUMBER = "MB_VersionNumber";

// Voltage regulator control & constants
const REGULATOR_ON = 0x01;
const REGULATOR_OFF = 0x00;
const REGULATOR_DELAY = 0.25; // wait for sensor to power up

// Pump mode or transducer mode
// Pump mode reads Modbus
const NOT_CONFIGURED = -1;
const PUMP_MODE = 1;
const TRANSDUCER_MODE = 0; 

// constant strings
// Making these strings constants helps
// prevent memory leaks, because the 
// strings are not created over and over again.

const TABLEDATA = "tabledata";
const BOOTCOUNT = "bootcount";
const TIME = "time";
const SWITCH1 = "switch1";
const SWITCH2 = "switch2";
const VBAT = "vbat";
const RSSI = "rssi";
const MEMORY = "memory";
const TEMP = "temp";
const TEMP002 = "temp002";
const ANALOG002 = "analog002";

const METADATA = "metadata";
const SSID = "ssid";
const DEVID = "devid";


// Imp002 pins
HW_Temp002 <- hardware.pinA; // temp sensor voltage on pin2 and on IMP002 pinA
HW_AnalogIn002 <- hardware.pinB; // second analog channel on IMP002 pinB
HW_Hall002 <- hardware.pinD;    // second Hall switch
HW_UART002 <- hardware.uart6E;  // UART channel for serial RS-232

// Pump with Modbus Mode 
// HW_MBUart1 <- hardware.uart1289;
// HW_FlowCount <- hardware.pin1;
// HW_ModBusDir <- hardware.pin2;

// Pump with Modbus Mode 
HW_MBUart1 <- hardware.uart12;
HW_FlowCount <- hardware.pin9;
HW_ModBusDir <- hardware.pin8;


HW_RegulatorCntl <- hardware.pin5; // common to both modes
// HW_SensorIn <- hardware.pin7; // common to both modes
HW_Analog1In <- hardware.pin7; // Analog channel 1

// Transducer only mode        
HW_Switch1 <- hardware.pin9;
HW_Switch2 <- hardware.pin8;
// HW_RegulatorCntl <- hardware.pin5; // common to both
// HW_Analog1In <- hardware.pin7; // common to both
HW_Temp <- hardware.pin2; // temp sensor voltage
HW_BatV <- hardware.pin1; // battery voltage to Imp board

// Transducer only mode        
// HW_Switch1 <- hardware.pin1;
//  HW_Switch2 <- hardware.pin2;
// HW_RegulatorCntl <- hardware.pin5; // common to both
// HW_Analog1In <- hardware.pin7; // common to both
//  HW_Temp <- hardware.pin8; // temp sensor voltage
//  HW_BatV <- hardware.pin9; // battery voltage to Imp board

// Check for hi and lo conditions using hysteresis algorithm
// Analog channel 1
// Analog1Volts_hi <- 1.1; // High voltage
// Analog1Volts_lo <- 1.0; // Low voltage
    // Switch tells us if above the trigger or below
// Analog1Volts_switch <- 0; // switch starts at off

XmitNow <- 0; // used to force Xmit to agent - starts false


// UART Communication example for the Modbus communication
// Transfer data from Imp uart, pins 1 CTS (not used by us), 2 RTS, 8 Tx, 9 Rx
// Data will be sent form the Imp to the Spark Fun RS-485 break-out board
// The board uses the RTS signal to control the direction of the data on 
// the RS-485 wires

// Send back Imp information
agent.on("getImpInfo", function(nouse)
{
        // Respond back with nv.meta which
        // contains the ImpID and Network Name
        // This request only comes if the device is running
        // but the agent has been reset
    server.log("Send back metadata");
    agent.send(METADATA, nv.meta);
}); // agent.on("getImpInfo"

agent.on("modem_write", function(str)
{
    server.log("##1#received str from Agent: "+str);
    HW_UART002.write("\n"+str+"\n"); // write string to port
});

agent.on("impControlVariables", function(vars)
{
    // Get the variables for sample period, xmit period and Imp mode
/*    
    nv.PUMP = vars.IMP_MODE.tointeger(); // Pump controller Module?
    nv.XMIT_PERIOD = vars.IMP_XMIT_PER.tofloat(); // Time between transmissions
    nv.SAMPLE_PERIOD = vars.IMP_SAMPLE_PER.tofloat(); // Time between samples
*/    
    nv.PUMP = vars.IMP_MODE; // Pump controller Module?
    nv.XMIT_PERIOD = vars.IMP_XMIT_PER; // Time between transmissions
    nv.SAMPLE_PERIOD = vars.IMP_SAMPLE_PER; // Time between samples
    
    nv.IMP_ANALOG1_THRESHOLD = vars.IMP_ANALOG1_THRESHOLD;
    nv.IMP_ANALOG1_RANGE = vars.IMP_ANALOG1_RANGE;
    
    // Calculate the high and low hysteresis values
    nv.Analog1Volts_hi = nv.IMP_ANALOG1_THRESHOLD + 0.5 * nv.IMP_ANALOG1_RANGE; // High voltage
    nv.Analog1Volts_lo = nv.IMP_ANALOG1_THRESHOLD - 0.5 * nv.IMP_ANALOG1_RANGE; // Low voltage
    
    foreach(key, val in vars)
    {
        server.log("^^ Device control var key: "+key+" val: "+val);
    }
    server.log("---nv.PUMP: "+nv.PUMP+" nv.XMIT_PERIOD: "+nv.XMIT_PERIOD+" nv.SAMPLE_PERIOD: "+nv.SAMPLE_PERIOD+
                " nv.IMP_ANALOG1_THRESHOLD: "+nv.IMP_ANALOG1_THRESHOLD+
                " nv.IMP_ANALOG1_RANGE: "+nv.IMP_ANALOG1_RANGE+" nv.time: "+nv.time);
}); // agent.on("impControlVariables"

// Receive a new quarts per day setpoint from agent
agent.on("newsetpoint", function(newsetpoint) 
{
    server.log("^^^^^^^^^^^^^Setting QuartsPerDay to: " + newsetpoint);
    writeQuartsPerDay(newsetpoint); 
}); // agent.on("newsetpoint"

function setMotorState(state) 
{
    local motorCommand = [];
    if (state == 1) 
    {
     motorCommand = [ 0x10, 0x05, 0x00, 0x01, 0xFF, 0x00, 0xDE, 0xBB ];
    }
    else 
    {
        motorCommand = [ 0x10, 0x05, 0x00, 0x01, 0x00, 0x00, 0x9F, 0x4B ]; 
    }
    
    server.log("Setting motor to: " + state);
    imp.sleep(100.0/1000.0);
//    hardware.pin2.write(1);
    HW_ModBusDir.write(1);
//    imp.sleep(100.0/1000.0);
    foreach(val in motorCommand) 
    {
//        hardware.uart1289.write(val);
        HW_MBUart1.write(val);
    }
    imp.sleep(10.0/1000.0);
//    hardware.pin2.write(0);
    HW_ModBusDir.write(0);
    imp.sleep(100.0/1000.0);
}   // function setMotorState(state) 

function writeQuartsPerDay(value) 
{
    // hex string "10 06 00 03 41 28 00 00 F7 33"
    // Modbus address - 0x10
    // command - 0x06
    // register - 0x0003
    // data (32 bit float) 0x41280000
    // CRC 0xF733
    
        // Motor cannot be set to 0 using quarts per day
        // The minimum qpd value is 0.1 qpd, not quite 0
        // To turn the motor completely off, you must
        // use a different command to set the motor to off
    if (value.tofloat() > 0.1)
        setMotorState(1);
    else
        setMotorState(0);
    
    if (value.tofloat() > 0.1) 
    {
//        local qpdCommand = [ 0x10, 0x06, 0x00, 0x03 ];
         local qpdCommand = [ 0x10, 0x10, 0x00, 0x03, 0x00, 0x02, 0x04 ];
        
        local flBlob = blob(4);
        flBlob.writen(value.tofloat(), 'f');
        
        qpdCommand.append(flBlob[3]);
        qpdCommand.append(flBlob[2]);
        qpdCommand.append(flBlob[1]);
        qpdCommand.append(flBlob[0]);
        
        local crc = calculateCRC(qpdCommand, qpdCommand.len());
        qpdCommand.extend(crc);
        
        server.log("Writing quarts per day");
//         server.log("sent: "+byteArrayString(qpdCommand));
        imp.sleep(10.0/1000.0);
//        hardware.pin2.write(1);
        HW_ModBusDir.write(1);
//        imp.sleep(10.0/1000.0);
        foreach(val in qpdCommand) 
        {
//            hardware.uart1289.write(val);
            HW_MBUart1.write(val);
        }
        imp.sleep(15.0/1000.0);
//        hardware.pin2.write(0);
        HW_ModBusDir.write(0);
//        imp.sleep(100.0/1000.0);
        imp.sleep(10.0/1000.0);
        
        // read response from setting qpd
         local byte = -1;
    // The a stands for all bytes but I didn't want to type it out so many times.
        local a = [];
//        while ((byte = hardware.uart1289.read()) != -1) 
        while ((byte = HW_MBUart1.read()) != -1)
        {
            a.append(byte);
            imp.sleep(100.0/1000.0);
         }
//        server.log("received: "+byteArrayString(a));
    }
}   // writeQuartsPerDay(value)

// CRC calculation code below is needed for the Modbus
// data packages.
//*************************************************
//************ CRC Calculation Code ***************
//*************************************************

function xbyteArrayString(arr){
    local str = ""
    for(local i = 0; i < arr.len(); i++){
        if(arr[i] == null) break;
            str = str + format("%.2X ", arr[i]);
        }
    return str;
}

// blob of CRC values for high–order byte
const auchCRCHi = "\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40";
// blob of CRC values for low–order byte
const auchCRCLo = "\x00\xC0\xC1\x01\xC3\x03\x02\xC2\xC6\x06\x07\xC7\x05\xC5\xC4\x04\xCC\x0C\x0D\xCD\x0F\xCF\xCE\x0E\x0A\xCA\xCB\x0B\xC9\x09\x08\xC8\xD8\x18\x19\xD9\x1B\xDB\xDA\x1A\x1E\xDE\xDF\x1F\xDD\x1D\x1C\xDC\x14\xD4\xD5\x15\xD7\x17\x16\xD6\xD2\x12\x13\xD3\x11\xD1\xD0\x10\xF0\x30\x31\xF1\x33\xF3\xF2\x32\x36\xF6\xF7\x37\xF5\x35\x34\xF4\x3C\xFC\xFD\x3D\xFF\x3F\x3E\xFE\xFA\x3A\x3B\xFB\x39\xF9\xF8\x38\x28\xE8\xE9\x29\xEB\x2B\x2A\xEA\xEE\x2E\x2F\xEF\x2D\xED\xEC\x2C\xE4\x24\x25\xE5\x27\xE7\xE6\x26\x22\xE2\xE3\x23\xE1\x21\x20\xE0\xA0\x60\x61\xA1\x63\xA3\xA2\x62\x66\xA6\xA7\x67\xA5\x65\x64\xA4\x6C\xAC\xAD\x6D\xAF\x6F\x6E\xAE\xAA\x6A\x6B\xAB\x69\xA9\xA8\x68\x78\xB8\xB9\x79\xBB\x7B\x7A\xBA\xBE\x7E\x7F\xBF\x7D\xBD\xBC\x7C\xB4\x74\x75\xB5\x77\xB7\xB6\x76\x72\xB2\xB3\x73\xB1\x71\x70\xB0\x50\x90\x91\x51\x93\x53\x52\x92\x96\x56\x57\x97\x55\x95\x94\x54\x9C\x5C\x5D\x9D\x5F\x9F\x9E\x5E\x5A\x9A\x9B\x5B\x99\x59\x58\x98\x88\x48\x49\x89\x4B\x8B\x8A\x4A\x4E\x8E\x8F\x4F\x8D\x4D\x4C\x8C\x44\x84\x85\x45\x87\x47\x46\x86\x82\x42\x43\x83\x41\x81\x80\x40";
 
function calculateCRC ( puchMsg, usDataLen )
{
    //unsigned char *puchMsg ; // message to calculate CRC upon
    //unsigned short usDataLen ; // quantity of bytes in message
    local uchCRCHi = 0xFF ; // high byte of CRC initialized
    local uchCRCLo = 0xFF ; // low byte of CRC initialized
    local uIndex ; // will index into CRC lookup table
    local i = 0;
    while (usDataLen--){ // pass through message buffer
        uIndex = uchCRCLo ^ puchMsg[i] ; // calculate the CRC
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
        uchCRCHi = auchCRCLo[uIndex] ;
        i++
    }
    return [uchCRCLo, uchCRCHi] ;
}   // function calculateCRC ( puchMsg, usDataLen )

//*************************************************

function requestRegisterInfo()
{
    // write hex "10 03 00 00 00 0F 06 8F"
    local requestRegisters = [ 0x10, 0x03, 0x00, 0x00, 0x00, 0x0F ];
    local crc = calculateCRC(requestRegisters, requestRegisters.len());
    requestRegisters.extend(crc);
    // This requests the register data
    foreach(val in requestRegisters) {
//        hardware.uart1289.write(val);
        HW_MBUart1.write(val);
    }
}   // requestRegisterInfo()

// function handleModbus() 
function logMB() 
{
//    local d = date(); 
    
//    server.log("Reading values from MODBUS registers");
//    hardware.pin2.write(1); // MB write
    HW_ModBusDir.write(1);
    requestRegisterInfo();  // send MB read registers command string
    imp.sleep(10.0/1000.0); // wait for response
//    hardware.pin2.write(0); // MB read
    HW_ModBusDir.write(0);
    imp.sleep(10.0/1000.0); // wait for response
    
 //   agent.send("impid", {ImpID = format("%s",hardware.getimpeeid())});
    
    local byte = -1;
    // The a stands for all bytes but I didn't want to type it out so many times.
    local a = [];
        // Read MB register data from UART
//    while ((byte = hardware.uart1289.read()) != -1)
    while ((byte = HW_MBUart1.read()) != -1)
    {
        a.append(byte); // add byte to end of array
        imp.sleep(100.0/1000.0);    // wait for next byte
    }
    
    // Some of these are supposed to be unsigned.  Are those being read correctly?
//    local csvPayload = "";
    if (a.len() > 0) 
    {   // MB Data available in the array
        local onTime = (a[3] << 8) | a[4];
        local offTime = (a[5] << 8) | a[6]; 
        
        // Convert the quarts per day from binary to a float
        local qpd = blob(4);
        qpd.writen(a[12], 'b');
        qpd.writen(a[11], 'b');
        qpd.writen(a[10], 'b');
        qpd.writen(a[9], 'b');
        qpd.seek(0, 'b');
        local quartsPerDay = qpd.readn('f');
        

        nv.sensor[MB_QUARTSPERDAY] <- quartsPerDay;
        nv.sensor[MB_CYCLES] <- (a[13] << 24) | (a[14] << 16) | (a[15] << 8) | a[16];
        nv.sensor[MB_TEMPERATURE] <- (a[17] << 8) | a[18];
        
            // The battery voltage on an AC unit will always be 0
            // in that case, do not send
        local batvolts = casti2f((a[25] << 24) | (a[26] << 16) | (a[27] << 8) | a[28]); // not working
        if(batvolts) // only report if batvolts ne 0
        {
            nv.sensor[MB_BATTERYVOLTAGE] <- batvolts;
        }
        
        // These values rarely change, if ever
        // only report them at start-up time
        if(nv.bootcount == 0)
        {
                // send battery voltage to show it is working, even if 0
            nv.sensor[MB_BATTERYVOLTAGE] <- casti2f((a[25] << 24) | (a[26] << 16) | (a[27] << 8) | a[28]); // not working
            nv.sensor[MB_VERSIONNUMBER] <- (a[29] << 24) | (a[30] << 16) | (a[31] << 8) | a[32];
            nv.sensor[MB_ONTIME] <- onTime;
            nv.sensor[MB_OFFTIME] <- offTime;
            nv.sensor[MB_TEMPSETPOINT] <- (a[7] << 8) | a[8];
            nv.sensor[MB_PLUNGERSIZE] <- (a[19] << 8) | a[20];
            nv.sensor[MB_PINPOSITION] <- (a[21] << 8) | a[22];
            nv.sensor[MB_MOTORSIZE] <- (a[23] << 8) | a[24]
        }
    } else 
    {   // no data in MB array
        server.log("Can't read MODBUS registers!");
    }
} // function logMB() 
//*************************************************


// Send data to the agent
function transmitData() 
{
    // send gathered data
    nv.sensor[BOOTCOUNT] <- nv.bootcount++;
    nv.sensor[TIME] <- t;
    agent.send(TABLEDATA, nv.sensor);
//    nv.sensor = {};
    nv.sensor.clear();
        // rssi must be sampled while the WiFi is turned on
        // most of the time the WiFi is off, except here, where data has 
        // just been transmitted.
    nv.sensor[RSSI] <- imp.rssi();
    nv.sensor[MEMORY] <- imp.getmemoryfree();
}   // function transmitData() 

// log data in between transmit times
function logdata() 
{
//  local min = (t/60) % 60;
  local sec = t % 60;
  
//  hardware.pin5.write(REGULATOR_ON); // turn on regulator
  HW_RegulatorCntl.write(REGULATOR_ON); // turn on regulator
  imp.sleep(REGULATOR_DELAY); // Wait for regulator voltage to come up
        // While waiting for regulator, read switches
//    nv.sensor[SWITCH1] <- hardware.pin1.read();
    nv.sensor[SWITCH1] <- HW_Switch1.read();
//    nv.sensor[SWITCH2] <- hardware.pin2.read();
    nv.sensor[SWITCH2] <- HW_Switch2.read();
    // also read battery voltage on pin 9
//    local adval = hardware.pin9.read(); // 0 - 65535
    local adval = HW_BatV.read(); // 0 - 65535
    
    local volts = (hardware.voltage()/4096.0) * (adval/16.0); 
    // R1 = 357k and R2 = 96.7k (actual measurements)
    // Vbat = V (R1 + R2)/R2    // from the voltage divider
    // need to measure resistors for accuracy
    //   local vbat = volts * (323.6 + 100.0)/100.0;
    // measured ratio of 4.59
    local vbat = volts * 4.59;
    nv.sensor[VBAT] <- vbat;
//  imp.sleep(0.25); // Wait for regulator voltage to come up
//  imp.sleep(REGULATOR_DELAY); // Wait for regulator voltage to come up
    // Get sensor voltage
//  local volts = (hardware.voltage()/4096.0) * (hardware.pin7.read()/16.0); // calc pressure here 
  local Analog1Volts = (hardware.voltage()/4096.0) * (HW_Analog1In.read()/16.0); // calc pressure here 
  
//  nv.data = nv.data + format("pvolts-%d, %.3f\n", t-nv.time, volts);
  nv.sensor[t] <- Analog1Volts;

        // Implelent hysteresis algorithm
        // Check for first time over the threshold   
  if (Analog1Volts > nv.Analog1Volts_hi && nv.Analog1Volts_switch == 0)
  {
      XmitNow = 1; // force an immediate xmit
      nv.Analog1Volts_switch = 1; // indicate over the threshold
      server.log("--! Force xmit logdata");
  }
  
  if (Analog1Volts < nv.Analog1Volts_lo && nv.Analog1Volts_switch == 1)
  {
      nv.Analog1Volts_switch = 0; // indicate under the threshold
  }
  
    // Get temperature data from pin 8
//    local analogval = hardware.pin8.read(); // 0 - 65535 
    local analogval = HW_Temp.read(); // 0 - 65535 
    
    local tempC = ((analogval * 0.00005035)-0.5)*100.0;                                                                                                           
    local tempF = (9.0/5.0)*tempC + 32.0;
//    nv.data += format("temp1-%d, %f\n", t-nv.time, tempF);
    nv.sensor[TEMP] <- tempF;
    
//  hardware.pin5.write(REGULATOR_OFF); // turn off regulator
  HW_RegulatorCntl.write(REGULATOR_OFF); // turn off regulator
}   // function logdata() 

// log pressure sensor data only
// used when in Modbus mode
function logpressure() 
{
//  local min = (t/60) % 60;
  local sec = t % 60;
  
//  hardware.pin5.write(REGULATOR_ON); // turn on regulator
  HW_RegulatorCntl.write(REGULATOR_ON); // turn on regulator
//  imp.sleep(0.25); // Wait for regulator voltage to come up
  imp.sleep(REGULATOR_DELAY); // Wait for regulator voltage to come up
    // Get sensor voltage
//  local volts = (hardware.voltage()/4096.0) * (hardware.pin7.read()/16.0); // calc pressure here 
  local Analog1Volts = (hardware.voltage()/4096.0) * (HW_Analog1In.read()/16.0); // calc pressure here 
//  HW_Analog1In
//  nv.data = nv.data + format("pvolts-%d, %.3f\n", t-nv.time, volts);
  nv.sensor[t] <- Analog1Volts;
  
          // Implement hysteresis algorithm
        // Check for first time over the threshold   
  if (Analog1Volts > nv.Analog1Volts_hi && nv.Analog1Volts_switch == 0)
  {
      XmitNow = 1; // force an immediate xmit
      nv.Analog1Volts_switch = 1; // indicate over the threshold
      server.log("--! Force xmit logpressure");
  }
  
  if (Analog1Volts < nv.Analog1Volts_lo && nv.Analog1Volts_switch == 1)
  {
      nv.Analog1Volts_switch = 0; // indicate under the threshold
  }
  
  // Get temperature data from pin 8
//    local analogval = hardware.pin8.read(); // 0 - 65535 
    local analogval = HW_Temp002.read(); // 0 - 65535 
    
    local tempC = ((analogval * 0.00005035)-0.5)*100.0;                                                                                                           
    local tempF = (9.0/5.0)*tempC + 32.0;
//    nv.data += format("temp1-%d, %f\n", t-nv.time, tempF);
    nv.sensor[TEMP002] <- tempF;
    
    // get analog data from IMP002 channel
    Analog1Volts = (hardware.voltage()/4096.0) * (HW_AnalogIn002.read()/16.0); // calc pressure here 
    nv.sensor[ANALOG002] <- Analog1Volts;
  
//  hardware.pin5.write(REGULATOR_OFF); // turn off regulator
//  HW_RegulatorCntl.write(REGULATOR_OFF); // turn off regulator
}   // function logpressure() 

// callback for Hall switch 1 flowcount
function hall1()
{
    server.log("-Hall 1 changed state");
    HW_UART002.write("Hall1");
}   // function hall1()

// callback for Hall switch 2 - IMP002
function hall2()
{
    server.log("-Hall 2 changed state");
}   // function hall2()

// called when bytes are received on RS-232
// Function triggered by receipt of a byte from the connected computer
// Adds the input byte as an alphanumeric character to a buffer string
// which is displayed in the log when the remote user hits Enter
input_string <- ""; // initialize string
function readback()
{
    local byte = HW_UART002.read();
        // ignore initial input
    if (byte == -1) return;
    if (byte == 13)
    {   // handle receipt of CR
        // Output string and reset input_string for next set of chars
        server.log("Sent string: "+input_string);
        input_string = ""; // reset string
    } else
    {
        // add input character to input_string buffer
        input_string = input_string + chr(byte);
    }
}   // function readback()
// receive individual characters from RS-232
function chr(ascii_value)
{
    // convert passed integer value ASCII code
    // into a character string
    if (ascii_value < 32) return "";
    return format("%c", ascii_value);
} // function chr(ascii_value)

// Hardware set-up
// Hardware seems to need reinitialized when coming out of deep sleep
function hardwareSetUp()
{
    if(nv.PUMP == NOT_CONFIGURED)
    {
        server.log("-Device hardware not configured!");
        return;
    }

    if ("pinA" in hardware)
    {
//        server.log("--Running IMP002 module");
    }
    // IMP002 I/O pins - Available in both modes
     HW_Temp002.configure(ANALOG_IN); // temperature sensor
     HW_AnalogIn002.configure(ANALOG_IN); // second analog channel
     HW_Hall002.configure(DIGITAL_IN, hall2); // second hall switch
            // UART connection to RS-232 channel
            // Pin 6 and Pin E are used for Write & Read
            // readback function called for incoming bytes
    HW_UART002.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, readback);
     
     // Analog on pin7 is avail in both modes
     HW_Analog1In.configure(ANALOG_IN); 
    
// const PUMP_MODE = 1;
// const TRANSDUCER_MODE = 0; 
    if(nv.PUMP == PUMP_MODE)
    {
/*
        HW_Uart1 <- hardware.uart1289;
        HW_FlowCount <- hardware.pin1;
        HW_ModBusDir <- hardware.pin2;
        HW_RegulatorCntl <- hardware.pin5;
        HW_SensorIn <- hardware.pin7
*/
//        server.log("--Pump Mode - Hardware ModBus");
            // UART connection to RS-485 channel
            // Pin 8 and Pin 9 are used for Write & Read
            // Pins 1 & 2 are not used for uart and are reassigned below
//        hardware.uart1289.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS);
        HW_MBUart1.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS);
            // Pin 1 is Hall switch pulse input
//        hardware.pin1.configure(DIGITAL_IN, flowmetercount());
//        hardware.pin1.configure(DIGITAL_IN);
        HW_FlowCount.configure(DIGITAL_IN_PULLUP, hall1); // flow meter count
            // Pin 2 control direction of RS-485 Read or Write
//        hardware.pin2.configure(DIGITAL_OUT);
        HW_ModBusDir.configure(DIGITAL_OUT);
        // hardware.pin5.write(0x01 ^ nv.voltage_enable); // turn it off
        // Digital Write on pin 5 - control 3V regulator for sensors                                                                                                      
//        hardware.pin5.configure(DIGITAL_OUT);
        HW_RegulatorCntl.configure(DIGITAL_OUT);
            // Pressure Sensor input
//        hardware.pin7.configure(ANALOG_IN);
//        HW_Analog1In.configure(ANALOG_IN);
    } else
    {   // Transducer Mode
/*
        HW_Switch1 <- hardware.pin1;
        HW_Switch2 <- hardware.pin2;
        HW_RegulatorCntl <- hardware.pin5;
        HW_SensorIn <- hardware.pin7;
        HW_Temp <- hardware.pin8;
        HW_BatV <- hardware.pin9;
*/
//        server.log("Transducer Mode - Hardware Analog Input");
        // switch1 
//        hardware.pin1.configure(DIGITAL_IN_PULLUP);
//        HW_Switch1.configure(DIGITAL_IN_PULLUP);
        HW_Switch1.configure(DIGITAL_IN);
        // switch2
//        hardware.pin2.configure(DIGITAL_IN_PULLUP);
//        HW_Switch2.configure(DIGITAL_IN_PULLUP);
        HW_Switch2.configure(DIGITAL_IN);
        // hardware.pin5.write(0x01 ^ nv.voltage_enable); // turn it off
        // Digital Write on pin 5 - control 3V regulator for sensors                                                                                                      
//        hardware.pin5.configure(DIGITAL_OUT);
        HW_RegulatorCntl.configure(DIGITAL_OUT);
        // Analog read on pin 7 for pressure                                                                                                                              
//        hardware.pin7.configure(ANALOG_IN); 
//        HW_Analog1In.configure(ANALOG_IN); 
        // Analog read on pin 8 for temp                                                                                                                                  
//        hardware.pin8.configure(ANALOG_IN);
        HW_Temp.configure(ANALOG_IN);
        // Analog read on pin 9 for scaled battery voltage                                                                                                                             
//        hardware.pin9.configure(ANALOG_IN); 
        HW_BatV.configure(ANALOG_IN); 
        
    }
}   // function hardwareSetUp()

// dispatch logdata() and transmitdata() if time for xmit
function dispatch()
{
    // When the Imp comes out of deep sleep, it starts here
    // log an ADC value each 10 sec, only tell the server each minute 
    t = time();
    if(nv.PUMP == NOT_CONFIGURED)
    {
//        agent.send(METADATA, nv.meta);
//        server.log("-Device not configured!");
            // shallow sleep for a short time
            // waiting for agent to send
            // parameters
        imp.onidle(function()
        {
            server.log("-Device not configured!");
            imp.sleep(1.0);
            server.log("--after sleep");
            dispatch();
        });
        server.log("--after onidle");
        return;
    }
    imp.onidle(null);
        // Now we can set-up hardware with nv.PUMP defined
    hardwareSetUp();
// const PUMP_MODE = 1;
// const TRANSDUCER_MODE = 0;     
    if(nv.PUMP == PUMP_MODE)
    {
//        server.log("--Pump Mode logMB");
        logMB(); // sample MB registers
        logpressure(); 
    } else if (nv.PUMP == TRANSDUCER_MODE)
    {
//        server.log("--Transducer Mode logdata");
        logdata();  // sample analog data first
    } else
    {
        server.log("---*** PUMP mode not set");
    }
        // check to see if time to xmit
    if (t >= (nv.time + nv.XMIT_PERIOD) || XmitNow)
    {
        XmitNow = 0; // set back to false
        // increment bootcount with each xmit
//        nv.sensor[BOOTCOUNT] <- nv.bootcount++;
        // send xmit time data
//        nv.sensor[TIME] <- t;
        nv.time = t; // save xmit time
            // get Imp rssi and memory info
            // only send at startup
//        getImpInfo();
            // tell agent when to expect next transmission
        server.expectonlinein(nv.XMIT_PERIOD);
        transmitData(); // transmit the data to agent
            // DEBUG
//        server.log("---nv.PUMP: "+nv.PUMP+" nv.XMIT_PERIOD: "+nv.XMIT_PERIOD+" nv.SAMPLE_PERIOD: "+nv.SAMPLE_PERIOD+" nv.time: "+nv.time);
    }
//    logdata();  // sample data
        // Sync to the sample period - sleep for one sample period
    if(nv.PUMP == PUMP_MODE)
    {
        imp.onidle(function()
        {imp.wakeup(nv.SAMPLE_PERIOD - (time() % nv.SAMPLE_PERIOD), dispatch )
        });
    } else
    {
        imp.onidle(function() { imp.deepsleepfor(nv.SAMPLE_PERIOD - (time() % nv.SAMPLE_PERIOD)); });
    }
}   // function dispatch()

// if just turned on, and nv doesn't exist
if (!("nv" in getroottable())) 
{
    server.log("++++++++++Start 1st Pass");
    if ("pinA" in hardware)
    {
        server.log("--Running IMP002 module");
    }
    nv <- {     // data = "",  // data string accumulates data with each sample period
            sensor = {}, // table for sensor data
            MB = {},    // table for MB register
            meta = {},  // meta data about this device
            time = t,  // time stores the time at beginning of each transmission
            bootcount = 0, // bootcount is incremented on each wakeup
            
                // default settings
            PUMP = NOT_CONFIGURED, // Pump controller Module?
            XMIT_PERIOD = 10, // Time between transmissions
            SAMPLE_PERIOD = 10, // Time between samples
            TIMER_HANDLE = 0,
            
            // Set up trigger points
            // The trigger threshold has an upper and lower value
            // based on the range in order to implement hysteresis
            IMP_ANALOG1_THRESHOLD = -1,
            IMP_ANALOG1_RANGE = 0.1,
            
            
            // Check for hi and lo conditions using hysteresis algorithm
            // Analog channel 1
            Analog1Volts_hi = 1.1, // High voltage
            Analog1Volts_lo = 1.0, // Low voltage
                // Switch tells us if above the trigger or below
            Analog1Volts_switch = 0, // switch starts at off
        };
        // send Imp information to agent
        nv.meta[SSID] <- imp.getssid();
        nv.meta[DEVID] <- hardware.getdeviceid();
        agent.send(METADATA, nv.meta);
        
//    transmitData();
//    logdata();
}

// hardwareSetUp();
    // dispatch logs data and then decides if
    // it is time to send data package to agent
dispatch(); // log and transmit
// imp.onidle(logdata);
//logdata();
// server.log("---DEVICE CODE END---");

